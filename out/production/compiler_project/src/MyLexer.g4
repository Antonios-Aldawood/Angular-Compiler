lexer grammar MyLexer;

WhiteSpace: [ \t\r\n] -> skip;
NotTypeEquals: '!==';
NotEquals: '!=';
TypeEquals: '===';
Equals: '==';
Assign: '=';
MinusOne: '--';
MinusSomething: '-=';
Minus: '-';
PlusOne: '++';
PlusSomething: '+=';
Plus: '+';
Divide: '/';
Multiply: '*';
Overflow: '%';
OpenBracket: '(';
CloseBracket: ')';
OpenCurlyBracket: '{';
CloseCurlyBracket: '}';
OpenArrayBracket: '[';
CloseArrayBracket: ']';
SingleQuotation: '\'';
DoubleQuotation: '"';
BackTick: '`';
Reference: '@';
SmallerOrEqualsOperator: '<=';
LargerOrEqualsOperator: '>=';
SmallerOperator: '<';
LargerOperator: '>';
NullOperator: '?';
DoubleColon: ':';
SemiColon: ';';
Dot: '.';
Comma: ',';
Escape: '\\';
And: '&&';
Or: '||';
Not: '!';
ArrowFunction: '=>';
True: 'true';
False: 'false';
If: 'if';
Else: 'else';
Switch: 'switch';
Case: 'case';
Default: 'default';
For: 'for';
While: 'while';
Do: 'do';
Break: 'break';
Continue: 'continue';
Throw: 'throw';
Try: 'try';
Catch: 'catch';
Finally: 'finally';
TypeOf: 'typeof';
InstanceOf: 'instanceof';
In: 'in';
New: 'new';
This: 'this';
Super: 'super';
String: 'string';
Number: 'number';
Boolean: 'boolean';
Any: 'any';
Void: 'void';
Unknown: 'unknown';
Set: 'Set';
Map: 'Map';
Record: 'Record';
Object: 'object';
Static: 'static';
Public: 'public';
Private: 'private';
Protected: 'protected';
Var: 'var';
Let: 'let';
Const: 'const';
Return: 'return';
Function: 'function';
Class: 'class';
Extends: 'extends';
Implements: 'implements';
Import: 'import';
From: 'from';
As: 'as';
Export: 'export';
Console: 'console';
Log: 'log';
Selector: 'selector';
Standalone: 'standalone';
Template: 'template';
OnInit: 'ngOnInit';
OnDestroy: 'ngOnDestroy';
OnChanges: 'ngOnChanges';
OnAfterViewInit: 'ngAfterViewInit';
Numbers: ('0'..'9')+;
Identifier: [a-zA-Z_]+ (('0'..'9')+[a-zA-Z_]*)*;
StringLiteral:
SingleQuotation (~['\\] | Escape)* SingleQuotation |
DoubleQuotation (~['\\] | Escape)* DoubleQuotation;
Html:
BackTick (~['\\] | Escape)* BackTick;
